{"version":3,"sources":["./src/app/core/services/snackbar.service.ts","./src/app/core/services/azdo.service.ts","./src/app/project/project.component.ts","./src/app/project/project.component.html","./src/app/core/services/azdo-cache.service.ts","./src/environments/environment.ts","./src/app/collection/collection.component.ts","./src/app/connection-dialog/connection-dialog.component.ts","./src/app/connection-dialog/connection-dialog.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/finding-dialog/finding-dialog.component.ts","./src/app/finding-dialog/finding-dialog.component.html","./src/app/core/services/rule.service.ts","./src/app/collection/collection-security.component.ts","./src/app/collection/collection-security.component.html","./src/app/not-found/not-found.component.ts","./src/app/not-found/not-found.component.html","./src/app/core/services/utility.service.ts","./src/app/core/shared/material.module.ts","./src/app/project/project-security.component.ts","./src/app/project/project-security.component.html","./src/app/collection/strip-name.pipe.ts","./src/app/core/services/azdo-connection.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { TextOnlySnackBar } from '@angular/material/snack-bar/simple-snack-bar';\nimport { MatSnackBarRef } from '@angular/material/snack-bar/snack-bar-ref';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarService {\n\n  constructor(\n    private snackbar: MatSnackBar) {\n  }\n\n  error(message: string): MatSnackBarRef<TextOnlySnackBar> {\n    return this.snackbar.open(message, 'Dismiss');\n  }\n\n  success(message: string): MatSnackBarRef<TextOnlySnackBar> {\n    return this.snackbar.open(message);\n  }\n\n  info(message: string): MatSnackBarRef<TextOnlySnackBar> {\n    return this.snackbar.open(message, undefined, { duration: 2000 });\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of, EMPTY, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\nimport { Collection, ProjectInfo, SecurityNamespace, Identity, Folder } from '../shared/azdo-types';\r\nimport { ConnectionInfo } from '../shared/interfaces';\r\nimport { AzDoConnectionService } from './azdo-connection.service';\r\nimport { ObserversModule } from '@angular/cdk/observers';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AzDoService {\r\n  httpOptions = {\r\n    headers: new HttpHeaders({})\r\n  };\r\n\r\n  constructor(\r\n    private azDoConnectionService: AzDoConnectionService,\r\n    private http: HttpClient\r\n  ) {\r\n  }\r\n\r\n  tryConnection(connectionInfo: ConnectionInfo): any {\r\n    if (connectionInfo) {\r\n      const url = `${connectionInfo.url}/_apis/projects?api-version=${this.azDoConnectionService.mostRecentApiVersion}`;\r\n      return this.http.get<Collection<ProjectInfo>>(url, this.getHttpHeaders(connectionInfo));\r\n    }\r\n    else {\r\n      return EMPTY;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * GET Security Namespaces\r\n   * From the docs: https://docs.microsoft.com/en-us/azure/devops/organizations/security/namespace-reference\r\n   * Security namespaces are used to store access control lists (ACLs) on tokens. Data stored in security namespaces determines\r\n   *  the level of access the entities have to perform a specific action on specific resources.\r\n   */\r\n  getSecurityNamespaces(): Observable<Collection<SecurityNamespace>> {\r\n    const connection = this.azDoConnectionService.currentConnection;\r\n    if (connection) {\r\n      const url = `${connection.url}/_apis/securitynamespaces?api-version=${connection.apiVersion}`;\r\n      console.log(url);\r\n      return this.http.get<Collection<SecurityNamespace>>(url, this.getHttpHeaders(connection))\r\n        .pipe(\r\n          catchError(this.handleError<Collection<SecurityNamespace>>('getSecurityNamespaces', {}))\r\n        );\r\n    }\r\n    else {\r\n      return EMPTY;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the folder heirarchy\r\n   * https://docs.microsoft.com/en-us/rest/api/azure/devops/release/folders/list?view=azure-devops-rest-6.0\r\n   * GET https://vsrm.dev.azure.com/{organization}/{project}/_apis/release/folders/{path}?api-version=6.0-preview.2\r\n   */\r\n  getReleaseFolders(projectName: string): Observable<Collection<Folder>> {\r\n    const connection = this.azDoConnectionService.currentConnection;\r\n    if (connection) {\r\n      const url = `${connection.url}/${projectName}/_apis/release/folders?api-version=${connection.apiVersion}-preview.1`;\r\n      console.log(url);\r\n      return this.http.get<Collection<Folder>>(url, this.getHttpHeaders(connection))\r\n        .pipe(\r\n          catchError(this.handleError<Collection<Folder>>('getReleaseFolders', {}))\r\n        );\r\n    }\r\n    else {\r\n      return EMPTY;\r\n    }\r\n  }\r\n\r\n  // Security\r\n  // Need the security namespace guid\r\n  // Retrieve the Security Namespace\r\n  // Extract the PermssionBits namespaceResponse.value.actions\r\n  // If reporting a heirarchy of permissions c788c23e-1b46-4162-8f5e-d7585343b5de\r\n  // * Retrieve the root node and report the root node\r\n  // * Walk the child nodes recursiivly to the desired level and report each node\r\n  // * Reporting a node\r\n  // * * Get the Identity (from already retrieved data)\r\n  // * * Get the acl for the token and parse the acesDictionary\r\n  // * * Iterate the items in the acesDictionary\r\n  // * * Iterate the permission bits NotSet is the default\r\n\r\n  /**\r\n   * GET Access Control Lists\r\n   * From the docs: https://docs.microsoft.com/en-us/azure/devops/organizations/security/namespace-reference\r\n   * Security namespaces are used to store access control lists (ACLs) on tokens. Data stored in security namespaces determines\r\n   *  the level of access the entities have to perform a specific action on specific resources.\r\n   */\r\n  getAccessControlLists(namespace: string, token: string): Observable<Collection<any>> {\r\n    const connection = this.azDoConnectionService.currentConnection;\r\n    if (connection) {\r\n      const url = `${connection.url}/_apis/accesscontrollists/${namespace}?token=${token}&includeextendedinfo=true&recurse=true&api-version=${connection.apiVersion}`;\r\n      console.log(url);\r\n      return this.http.get<Collection<any>>(url, this.getHttpHeaders(connection))\r\n        .pipe(\r\n          catchError(this.handleError<Collection<any>>('getAccessControlLists', {}))\r\n        );\r\n    }\r\n    else {\r\n      return EMPTY;\r\n    }\r\n  }\r\n\r\n\r\n  getProjectValidUsersGroup(projectName: string): Observable<Collection<Identity>> {\r\n    const connection = this.azDoConnectionService.currentConnection;\r\n    const url = `${connection.url}/_apis/identities?searchFilter=General&filterValue=[${projectName}]\\\\Project%20Valid%20Users&queryMembership=direct&api-version=${connection.apiVersion}`;\r\n    console.log(url);\r\n    return this.http.get<Collection<Identity>>(url, this.getHttpHeaders(connection))\r\n      .pipe(\r\n        catchError(this.handleError<Collection<Identity>>('getProjectValidUsersGroup', {}))\r\n      );\r\n  }\r\n\r\n  // TODO: get the Special EveryoneApplicationGroup instead\r\n  getProjectCollectionValidUsersGroup(): Observable<Collection<Identity>> {\r\n    const connection = this.azDoConnectionService.currentConnection;\r\n    const url = `${connection.url}/_apis/identities?searchFilter=General&filterValue=Project%20Collection%20Valid%20Users&queryMembership=direct&api-version=${connection.apiVersion}`;\r\n    console.log(url);\r\n    return this.http.get<Collection<Identity>>(url, this.getHttpHeaders(connection))\r\n      .pipe(\r\n        catchError(this.handleError<Collection<Identity>>('getProjectCollectionValidUsersGroup', {}))\r\n      );\r\n  }\r\n\r\n  // Get the everyonegroup's membership identities\r\n  getIdentities(memberIds: string[]): Observable<Collection<Identity>> {\r\n    const connection = this.azDoConnectionService.currentConnection;\r\n    // const url = `${connection.url}/_apis/identities?descriptors=${descriptors.join()}&queryMembership=direct&api-version=${connection.apiVersion}`\r\n    const url = `${connection.url}/_apis/identities?identityIds=${memberIds.join()}&queryMembership=direct&api-version=${connection.apiVersion}`;\r\n    console.log(url);\r\n    return this.http.get<Collection<Identity>>(url, this.getHttpHeaders(connection))\r\n      .pipe(\r\n        catchError(this.handleError<Collection<Identity>>('getIdentities', {}))\r\n      );\r\n  }\r\n\r\n  /** GET Projects from the server */\r\n  getProjects(): Observable<Collection<ProjectInfo>> {\r\n    const connection = this.azDoConnectionService.currentConnection;\r\n    if (connection) {\r\n      const url = `${connection.url}/_apis/projects?api-version=${connection.apiVersion}`;\r\n      console.log(url);\r\n      return this.http.get<Collection<ProjectInfo>>(url, this.getHttpHeaders(connection))\r\n        .pipe(\r\n          catchError(this.handleError<Collection<ProjectInfo>>('getProjects', {}))\r\n        );\r\n    }\r\n    else {\r\n      return EMPTY;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T): any {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log the full error to console for now\r\n\r\n      // TODO: send human readable problems to the ui (a snack bar)\r\n      // this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  log(message: string): void {\r\n    // TODO: emit in UI somewhere\r\n    console.log(message);\r\n  }\r\n\r\n  private getHttpHeaders(connectionInfo: ConnectionInfo): any {\r\n    return {\r\n      headers: new HttpHeaders({\r\n        observe: 'response',\r\n        Authorization: 'Basic ' + btoa('' + ':' + connectionInfo.token + '')\r\n      })\r\n    };\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Observable, from, of, zip, forkJoin } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\n\nimport { Collection, SecurityNamespace, Identity } from '../core/shared/azdo-types';\nimport { AzDoService } from '../core/services/azdo.service';\nimport { AzDoConnectionService } from '../core/services/azdo-connection.service';\nimport { Finding, Rule } from '../core/shared/interfaces';\nimport { SnackbarService } from '../core/services/snackbar.service';\nimport { FindingDialogComponent } from '../finding-dialog/finding-dialog.component';\nimport { RuleService } from '../core/services/rule.service';\n\n@Component({\n  selector: 'app-project',\n  templateUrl: './project.component.html',\n  styleUrls: ['./project.component.css']\n})\nexport class ProjectComponent implements OnInit {\n  showProjectSecuritySpinner = false;\n  showSecurityFindingsBadge = false;\n  securityFindingsCount = 0;\n  securityNamespaces: Collection<SecurityNamespace> = {};\n  projectCollectionValidUsersGroup: Collection<Identity> = {};\n  projectCollectionValidUsersGroupMembers: Collection<Identity> = {};\n  projectCollectionValidUsersGroupMembersMembers: Collection<Identity> = {};\n  findings: Finding[] = [];\n\n  constructor(\n    private azdoConnectionService: AzDoConnectionService,\n    private azdoService: AzDoService,\n    private snackBarService: SnackbarService,\n    private ruleService: RuleService,\n    public dialog: MatDialog,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.showProjectSecuritySpinner = true;\n    from(this.azdoService.getProjectCollectionValidUsersGroup()).pipe(\n      concatMap(topLevelGroupResponse => {\n        const topLevelGroup: Identity = topLevelGroupResponse?.value![0];\n        return forkJoin([\n          of(topLevelGroupResponse),\n          this.azdoService.getIdentities(topLevelGroup.memberIds)\n        ]);\n      }),\n      concatMap(([response1, response2]) => {\n        return forkJoin([\n          of(response1),\n          of(response2),\n          this.azdoService.getIdentities(this.combineMemberIds(response2?.value!))\n        ]);\n      }),\n    ).subscribe(values => {\n      this.projectCollectionValidUsersGroup = values[0];\n      this.projectCollectionValidUsersGroupMembers = values[1];\n      this.projectCollectionValidUsersGroupMembersMembers = values[2];\n      this.checkProjectCollectionValidUsers();\n      this.securityFindingsCount = this.findings.length;\n      this.showProjectSecuritySpinner\n        = false;\n    });\n  }\n\n  openFindingsDialog(chip: any): void {\n    if (this.findings.length) {\n      const dialogRef = this.dialog.open(FindingDialogComponent, {\n        width: '500px',\n        data: { findings: this.findings }\n      });\n    } else {\n      // Show some eyecandy telling them how great their security is and what was checked\n    }\n  }\n\n  combineMemberIds(identities: Identity[]): string[] {\n    let memberIds: string[] = [];\n    identities.forEach(identity => {\n      memberIds = memberIds.concat(identity.memberIds!);\n    });\n    return memberIds;\n  }\n\n  private checkProjectCollectionValidUsers(): void {\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\n\n    this.projectCollectionValidUsersGroupMembers?.value!.forEach(member => {\n      const memberIdentity = this.projectCollectionValidUsersGroupMembers?.value?.find(\n        identity => identity?.descriptor === member.descriptor\n      );\n\n      if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Administrators`.toUpperCase()) {\n        this.checkProjectCollectionAdministrators(memberIdentity);\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Auditors`.toUpperCase()) {\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}Auditors`, 'Project Collection Auditors');\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Build Administrators`.toUpperCase()) {\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}BuildAdministrators`, 'Project Collection Build Administrators');\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Build Service Accounts`.toUpperCase()) {\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}BuildServiceAccounts`, 'Project Collection Build Service Accounts');\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Developers`.toUpperCase()) {\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}Developers`, 'Project Collection Developers');\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Operators`.toUpperCase()) {\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}Operators`, 'Project Collection Operators');\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Compliance Officers`.toUpperCase()) {\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}ComplianceOfficers`, 'Project Collection Compliance Officers');\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection DevOps Engineers`.toUpperCase()) {\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}DevOpsEngineers`, 'Project Collection DevOps Engineers');\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Release Engineers`.toUpperCase()) {\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}ReleaseEngineers`, 'Project Collection Release Engineers');\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Proxy Service Accounts`.toUpperCase()) {\n        this.checkProjectCollectionProxyServiceAccounts(memberIdentity);\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Service Accounts`.toUpperCase()) {\n        this.checkProjectCollectionServiceAccounts(memberIdentity);\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Test Service Accounts`.toUpperCase()) {\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}TestServiceAccounts`, 'Project Collection Test Service Accounts');\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Testers`.toUpperCase()) {\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}Testers`, 'Project Collection Testers');\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Security Service Group`.toUpperCase()) {\n        this.checkSecurityServiceGroup(memberIdentity);\n      }\n      else if (memberIdentity?.providerDisplayName?.toUpperCase().includes('Project Valid Users'.toUpperCase())) {\n        console.log(`Skipping ${memberIdentity.providerDisplayName}`);\n        // this.checkSecurityServiceGroup(identity);\n      }\n\n      else {\n        this.findings.push(\n          this.ruleService.getFinding(\n            this.ruleService.getUnexpectedCollectionGroupMemberRule('Project Collection Valid Users'),\n            memberIdentity?.providerDisplayName!,\n            memberIdentity?.descriptor!\n          )\n        );\n      }\n    });\n  }\n\n  /**\n   * Checks the members of a collection level group that should map to a singular windows group:\n   * 1. An Active Directory or Windows Group that follows naming convention [instance][GroupName]\n   * @param identity The identity that matches the rules being checked by this method\n   */\n  private checkProjectCollectionGroup(identity: Identity, groupName: string, groupDisplayName: string): void {\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\n\n    identity.members.forEach(descriptor => {\n      const memberIdentity = this.projectCollectionValidUsersGroupMembersMembers?.value?.find(\n        matchedidentity => identity?.descriptor === descriptor\n      );\n      if (!(memberIdentity?.providerDisplayName?.toUpperCase() === `${groupName}`.toUpperCase())\n      ) {\n        console.log(`Invalid Identity found in ${groupDisplayName}`);\n        console.log(memberIdentity);\n        this.findings.push(\n          this.ruleService.getFinding(\n            this.ruleService.getUnexpectedCollectionGroupMemberRule(groupDisplayName),\n            memberIdentity?.providerDisplayName!,\n            memberIdentity?.descriptor!\n          )\n        );\n      }\n    });\n  }\n\n  /**\n   * Checks the members of the Project Collection Administrators Group are:\n   * 1. An Active Directory or Windows Group that follows naming convention [instance]-[Administrators]\n   * 2. An OOTB well-known group\n   * @param identity The identity that matches the rules being checked by this method\n   */\n  private checkProjectCollectionAdministrators(identity: Identity): void {\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\n\n    identity.members.forEach(descriptor => {\n      const memberIdentity = this.projectCollectionValidUsersGroupMembersMembers?.value?.find(\n        matchedidentity => identity?.descriptor === descriptor\n      );\n\n      if (!(memberIdentity?.providerDisplayName?.toUpperCase() === `[TEAM FOUNDATION]\\\\Team Foundation Administrators`.toUpperCase()\n        || memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Service Accounts`.toUpperCase()\n        || memberIdentity?.providerDisplayName?.toUpperCase() === `${instanceName}Administrators`.toUpperCase()\n        || memberIdentity?.providerDisplayName?.toUpperCase() === `Administrators`.toUpperCase()\n        || memberIdentity?.providerDisplayName?.toUpperCase() === `[TEAM FOUNDATION]\\\\Azure DevOps Service Accounts`.toUpperCase())\n      ) {\n        this.findings.push(\n          this.ruleService.getFinding(\n            this.ruleService.getUnexpectedCollectionGroupMemberRule('Project Collection Administrators'),\n            memberIdentity?.providerDisplayName!,\n            memberIdentity?.descriptor!\n          )\n        );\n      }\n    });\n  }\n\n  /**\n   * Checks the members of the Project Collection Service Accounts are:\n   * 1. An OOTB well-known group\n   * @param identity The identity that matches the rules being checked by this method\n   */\n  private checkProjectCollectionServiceAccounts(identity: Identity): void {\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\n\n    identity.members.forEach(descriptor => {\n      const memberIdentity = this.projectCollectionValidUsersGroupMembersMembers?.value?.find(\n        matchedidentity => identity?.descriptor === descriptor\n      );\n\n      if (!(memberIdentity?.providerDisplayName?.toUpperCase() === `[TEAM FOUNDATION]\\\\Azure DevOps Service Accounts`.toUpperCase()\n        || memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Team Foundation Service Accounts`.toUpperCase())\n      ) {\n        this.findings.push(\n          this.ruleService.getFinding(\n            this.ruleService.getUnexpectedCollectionGroupMemberRule('Project Collection Service Accounts'),\n            memberIdentity?.providerDisplayName!,\n            memberIdentity?.descriptor!\n          )\n        );\n      }\n    });\n  }\n\n  /**\n   * Checks the members of the Project Collection Proxy Service Accounts are:\n   * 1. An OOTB well-known group\n   * @param identity The identity that matches the rules being checked by this method\n   */\n  private checkProjectCollectionProxyServiceAccounts(identity: Identity): void {\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\n\n    identity.members.forEach(descriptor => {\n      const memberIdentity = this.projectCollectionValidUsersGroupMembersMembers?.value?.find(\n        matchedidentity => identity?.descriptor === descriptor\n      );\n\n      if (!(memberIdentity?.providerDisplayName?.toUpperCase() === `[TEAM FOUNDATION]\\\\Azure DevOps Proxy Service Accounts`.toUpperCase())\n      ) {\n        this.findings.push(\n          this.ruleService.getFinding(\n            this.ruleService.getUnexpectedCollectionGroupMemberRule('Project Collection Proxy Service Accounts'),\n            memberIdentity?.providerDisplayName!,\n            memberIdentity?.descriptor!\n          )\n        );\n      }\n    });\n  }\n\n  /**\n   * Checks the members of the Security Service Group are:\n   * 1. An Active Directory or Windows Group that follows naming convention [instance][Developers]\n   * @param identity The identity that matches the rules being checked by this method\n   */\n  private checkSecurityServiceGroup(identity: Identity): void {\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\n\n    identity.members.forEach(descriptor => {\n      const memberIdentity = this.projectCollectionValidUsersGroupMembersMembers?.value?.find(\n        matchedidentity => identity?.descriptor === descriptor\n      );\n\n      if (!(memberIdentity?.customDisplayName?.toUpperCase().includes('Build Service'.toUpperCase()))\n      ) {\n        console.log(`Invalid Identity found in SecurityServiceGroup`);\n        console.log(memberIdentity);\n        this.findings.push(\n          this.ruleService.getFinding(\n            this.ruleService.getUnexpectedCollectionGroupMemberRule('Security Service Group'),\n            memberIdentity?.providerDisplayName!,\n            memberIdentity?.descriptor!\n          )\n        );\n      }\n    });\n  }\n\n  // private check(identity: Identity): void {\n  //   // console.log(\"check\");\n  //   // Should only contain [{collection}] Project Collection Service Acounts\n  // }\n\n}\n","<div class=\"centered\">\r\n    <mat-spinner *ngIf=\"showProjectSecuritySpinner\" diameter=\"30\" mode=\"indeterminate\"></mat-spinner>\r\n</div>\r\n\r\n<mat-chip-list aria-label=\"Results\" *ngIf=\"!showProjectSecuritySpinner\" [selectable]=\"true\">\r\n    <mat-chip matBadge=\"{{securityFindingsCount}}\" matBadgeColor=\"warn\" (click)=\"openFindingsDialog('securityFindings')\">Security\r\n        Groups</mat-chip>\r\n    <mat-chip>Custom Security Groups WHy?</mat-chip>\r\n</mat-chip-list>\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, from, of, EMPTY } from 'rxjs';\r\nimport { AzDoService } from './azdo.service';\r\nimport { Collection, SecurityNamespace, Identity, ProjectInfo } from '../shared/azdo-types';\r\nimport { shareReplay } from 'rxjs/operators';\r\nimport { CloseScrollStrategy } from '@angular/cdk/overlay';\r\nimport { element } from 'protractor';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AzDoCacheService {\r\n  securityNamespaces: Collection<SecurityNamespace> = {};\r\n  releaseManagementSecurityNamespaceId = 'c788c23e-1b46-4162-8f5e-d7585343b5de';\r\n  identities: Identity[] = [];\r\n\r\n  // everyoneGroup: Collection<Identity> = {};\r\n  // everyone: Collection<Identity> = {};\r\n\r\n  constructor(\r\n    private azdoService: AzDoService\r\n  ) {\r\n    this.azdoService.getSecurityNamespaces()\r\n      .subscribe(results => {\r\n        this.securityNamespaces = results;\r\n      });\r\n    // this.cacheData();\r\n  }\r\n\r\n  getSecurityNamespace(namespaceId: string): SecurityNamespace {\r\n    const returnNamespace = this.securityNamespaces.value?.find(\r\n      securityNamespace => securityNamespace?.namespaceId === namespaceId\r\n    );\r\n    return returnNamespace!;\r\n  }\r\n\r\n  cacheIdentities(identityCollection: Collection<Identity>): void {\r\n    this.identities = this.identities.concat(identityCollection.value!);\r\n  }\r\n\r\n  getIdentity(descriptor: string): Identity{\r\n    const returnIdentity = this.identities.find(\r\n      identity => identity?.descriptor === descriptor\r\n      );\r\n    return returnIdentity!;\r\n  }\r\n\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { Collection, SecurityNamespace, Identity, ProjectInfo } from '../core/shared/azdo-types';\r\nimport { AzDoService } from '../core/services/azdo.service';\r\nimport { AzDoCacheService } from '../core/services/azdo-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-collection',\r\n  templateUrl: './collection.component.html',\r\n  styleUrls: ['./collection.component.css']\r\n})\r\nexport class CollectionComponent implements OnInit {\r\n  projectValidUsersGroup: Collection<Identity>;\r\n  projects: Collection<ProjectInfo>;\r\n\r\n  constructor(\r\n    private azdoService: AzDoService,\r\n    private azDoCacheService: AzDoCacheService) {\r\n    this.projects = {};\r\n    this.projectValidUsersGroup = {};\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.azdoService.getProjects()\r\n      .subscribe(results => {\r\n        this.projects = results;\r\n      });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\nimport { AbstractControl, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { catchError } from 'rxjs/operators';\n\nimport { ConnectionInfo } from '../core/shared/interfaces';\nimport { AzDoConnectionService } from '../core/services/azdo-connection.service';\nimport { AzDoService } from '../core/services/azdo.service';\nimport { SnackbarService } from '../core/services/snackbar.service';\n\n/**\n * Interface that models data passed to and back from the Connection Dialog\n */\nexport interface DialogData {\n  url: string;\n  token: string;\n  instance: string;\n}\n\n@Component({\n  selector: 'app-connection-dialog',\n  templateUrl: './connection-dialog.component.html',\n  styleUrls: ['./connection-dialog.component.css']\n})\nexport class ConnectionDialogComponent {\n\n  // FormBuilder'up a FormGroup for validating user input\n  connectionForm = this.fb.group({\n    inputUrl: [this.data.url, [\n      Validators.required,\n      Validators.pattern('^(http:\\/\\/|https:\\/\\/).*')\n    ]],\n    inputToken: [this.data.token, [\n      Validators.required,\n      Validators.minLength(40)\n    ]],\n    instance: [this.data.instance, [\n      Validators.required,\n      Validators.minLength(3)\n    ]]\n  });\n\n  // Eye candy while user waits to validate a connection\n  showSpinner = false;\n\n  constructor(\n    private azDoConnectionService: AzDoConnectionService,\n    private azDoService: AzDoService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    public dialogRef: MatDialogRef<ConnectionDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData | any\n  ) {\n    this.azDoConnectionService = azDoConnectionService;\n    this.azDoService = azDoService;\n  }\n\n  // Some convience methods used in the view to referece the model\n  get inputUrl(): AbstractControl | null { return this.connectionForm.get('inputUrl'); }\n  get inputToken(): AbstractControl | null { return this.connectionForm.get('inputToken'); }\n  get instance(): AbstractControl | null { return this.connectionForm.get('instance'); }\n\n  getUrlErrorMessages(): string | undefined {\n    return this.inputUrl?.hasError('required') ? 'Url is required' :\n      this.inputUrl?.hasError('pattern') ? 'Invalid url: http://host/collection or https://org.visualstudio.com' : '';\n  }\n  getTokenErrorMessages(): string | undefined {\n    return this.inputToken?.hasError('required') ? 'Token is required' :\n      this.inputToken?.hasError('minlength') ? 'Value must be at least 40 characters' : '';\n  }\n  getInstanceErrorMessages(): string | undefined {\n    return this.instance?.hasError('required') ? 'Instance is required' :\n      this.instance?.hasError('minlength') ? 'Value must be at least 3 characters, e.g. TFS' : '';\n  }\n\n  // Supports canceling the dialog without changing any state\n  onCancelClick(): void {\n    this.dialogRef.close();\n  }\n\n  /**\n   * Tries an Azure DevOps (Server and Services) connection to determine the version of the\n   * API supported by the endpoint. Attempts to trap some common errors to better inform the\n   * user (but this is largely untested).\n   *\n   * If the version is successfully determined, the new connection becomes the current\n   * connection that the system uses for all AzDO requests.\n   *\n   * Experiements:\n   * Modeling an attempted connection: e.g. AttemptedConnection interface that holds the\n   *      API Version and error messages. I had to add a count for the happy path when\n   *      projects are returned. TypeScript (Angular) realized the type which clashed with the\n   *      normal result exposed for Subscribe. Need to attempt subclassing that adding my\n   *      payload.\n   * Moving this code to AzDoService: Unsuccessfull for a couple reasons:\n   *      1: I wanted to show a spinner for long running requests\n   *      2: I wanted to validate the form input before attempting the request\n   *      3: I wanted the request to complete before hiding the spinner, showing errors,\n   *          and closing the dialog.\n   *\n   * TODO:\n   *      1. Change for each new version of the REST API.\n   *      2. Implement Preview API support\n   *      3. Extrac the collection (Server) or organization (Services)\n   */\n  onOkClick(): void {\n    if (this.connectionForm.valid) {\n      const newConnection: ConnectionInfo = {\n        url: this.inputUrl?.value,\n        token: this.inputToken?.value,\n        instanceName: this.instance?.value\n      };\n      this.showSpinner = true;\n      this.azDoService.tryConnection(newConnection)\n        .pipe(\n          catchError(error => {\n            return this.azDoConnectionService.getApiVersionFromError(error);\n          })\n        )\n        .subscribe((result: { status: any; statusText: any; }) => {\n          if (this.azDoConnectionService.apiVersionFound(result, newConnection)) {\n            this.azDoConnectionService.addConnection(newConnection);\n            this.azDoConnectionService.setConnection(newConnection);\n            this.showSpinner = false;\n            this.dialogRef.close();\n          } else {\n            this.showSpinner = false;\n            this.snackbar.error(`(${result.status}) ${result.statusText}`);\n          }\n        });\n    }\n  }\n}\n","<h1 mat-dialog-title>New Connection</h1>\n<div mat-dialog-content [formGroup]=\"connectionForm\">\n\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Collection or Organization Url</mat-label>\n        <input id=\"inputUrl\" matInput required \n            formControlName=\"inputUrl\">\n        <mat-error *ngIf=\"inputUrl?.invalid && (inputUrl?.dirty || inputUrl?.touched)\">{{getUrlErrorMessages()}}</mat-error>\n    </mat-form-field>\n\n    <div class=\"field-spacer\"></div>\n\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Token (save only)</mat-label>\n        <input id=\"inputToken\" matInput required \n            formControlName=\"inputToken\">\n        <mat-error *ngIf=\"inputToken?.invalid && (inputToken?.dirty || inputToken?.touched)\">{{getTokenErrorMessages()}}</mat-error>\n    </mat-form-field>\n\n    <div class=\"field-spacer\"></div>\n\n    <mat-form-field appearance=\"fill\">\n        <mat-label>Instance</mat-label>\n        <input id=\"instance\" matInput required \n            formControlName=\"instance\">\n        <mat-error *ngIf=\"instance?.invalid && (instance?.dirty || instance?.touched)\">{{getInstanceErrorMessages()}}</mat-error>\n    </mat-form-field>\n\n</div>\n<div mat-dialog-actions>\n    <button mat-button (click)=\"onCancelClick()\">Cancel</button>\n    <button mat-button (click)=\"onOkClick()\" cdkFocusInitial>Ok</button>\n    <mat-spinner diameter=\"35\" mode=\"indeterminate\" *ngIf=\"showSpinner === true\"></mat-spinner>\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\nimport { AzDoConnectionService } from './core/services/azdo-connection.service';\r\nimport { AzDoService } from './core/services/azdo.service';\r\nimport { ConnectionInfo } from './core/shared/interfaces';\r\nimport { ConnectionDialogComponent } from './connection-dialog/connection-dialog.component';\r\nimport { Collection, SecurityNamespace, Identity, ProjectInfo } from './core/shared/azdo-types';\r\nimport { AzDoCacheService } from './core/services/azdo-cache.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Dense Azure DevOps';\r\n  description = 'Regulatory-driven Team Projects with drift detection';\r\n  showSpinner = false;\r\n  newConnectionPrompt = 'New Connection';\r\n  projects: Collection<ProjectInfo>;\r\n\r\n  constructor(\r\n    public azDoConnectionService: AzDoConnectionService,\r\n    private azdoService: AzDoService,\r\n    private azdoCacheService: AzDoCacheService,\r\n    public dialog: MatDialog,\r\n  ) {\r\n    this.azDoConnectionService = azDoConnectionService;\r\n    this.projects = {};\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.showSpinner = true;\r\n    if (this.azDoConnectionService.currentConnection) {\r\n      this.azdoService.getProjects()\r\n        .subscribe(results => {\r\n          this.projects = results;\r\n          this.showSpinner = false;\r\n        });\r\n    }\r\n  }\r\n\r\n  connectionMenuOpened(): void {\r\n    console.log('Might want to mask out the main content area when this happens');\r\n  }\r\n\r\n  connectionClicked(connection: ConnectionInfo | undefined): void {\r\n    if (connection === undefined) {\r\n      this.openConnectionDialog({ url: '', token: '' });\r\n    } else {\r\n      this.azDoConnectionService.setConnection(connection);\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  openConnectionDialog(connectionInfo: ConnectionInfo): void {\r\n    const dialogRef = this.dialog.open(ConnectionDialogComponent, {\r\n      width: '500px',\r\n      data: connectionInfo\r\n    });\r\n  }\r\n\r\n}\r\n","<mat-toolbar color=\"primary\">\n  <button mat-icon-button (click)=\"drawer.toggle()\">\n    <mat-icon>menu</mat-icon>\n  </button>\n  <span>{{title}}</span>\n  <span class=\"toolbar-spacer\"></span>\n  <button mat-icon-button aria-label=\"Checked\">\n    <mat-icon>bookmark_added</mat-icon>\n  </button>\n</mat-toolbar>\n\n<mat-sidenav-container id=\"container\" fullscreen>\n\n  <mat-sidenav #drawer mode=\"push\">\n    <mat-list>\n      <mat-list-item>Tools</mat-list-item>\n    </mat-list>\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n    <mat-toolbar>\n      <span class=\"toolbar-spacer\"></span>\n      <button mat-button [matMenuTriggerFor]=\"connectionMenu\" (menuOpened)=\"connectionMenuOpened()\">\n        {{azDoConnectionService.currentConnection.url}}:{{azDoConnectionService.currentConnection.apiVersion}}\n      </button>\n      <mat-menu #connectionMenu=\"matMenu\">\n        <button mat-menu-item *ngFor=\"let connection of azDoConnectionService.connections\"\n          (click)=\"connectionClicked(connection)\">{{connection.url}}:{{connection.apiVersion}}</button>\n        <button mat-menu-item (click)=\"connectionClicked(undefined)\">{{newConnectionPrompt}}</button>\n      </mat-menu>\n    </mat-toolbar>\n    <div style=\" height: 100%; margin: 2em;\">\n\n      <div *ngIf=\"this.azDoConnectionService.currentConnection\">\n        <mat-card>\n          <mat-card-header>\n            <mat-card-title>{{this.azDoConnectionService.currentConnection.url | stripName}}</mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n            <app-collection-security #collectionSecurityComponent></app-collection-security>\n          </mat-card-content>\n          <mat-card-actions>\n            <button mat-button color=\"Primary\" (click)=\"collectionSecurityComponent.download()\" aria-label=\"Save\">\n              <mat-icon>save_alt</mat-icon>Save\n            </button>\n            <button mat-button color=\"Primary\" (click)=\"collectionSecurityComponent.refresh()\" aria-label=\"Save\">\n              <mat-icon>refresh</mat-icon>refresh\n            </button>\n          </mat-card-actions>\n        </mat-card>\n      </div>\n\n      <div class=\"centered margined\" *ngIf=\"showSpinner\">\n        <mat-spinner diameter=\"50\" mode=\"indeterminate\"></mat-spinner>\n      </div>\n\n      <div *ngIf=\"this.azDoConnectionService.currentConnection\" fxLayoutGap=\"16px\" fxLayout=\"row wrap\" fxLayout.sm=\"column\"\n        fxLayout.xs=\"column\">\n        <mat-card *ngFor=\"let project of projects.value\" class=\"project-card\">\n          <mat-card-header>\n            <mat-card-title>{{project.name}}</mat-card-title>\n            <mat-card-subtitle>\n              <div class=\"project-description\">{{project.description}}</div>\n            </mat-card-subtitle>\n          </mat-card-header>\n          <mat-card-content>\n            <app-project-security #projectSecurityChildComponent [project]=\"project\"></app-project-security>\n          </mat-card-content>\n          <mat-card-actions>\n            <button mat-button color=\"Primary\" (click)=\"projectSecurityChildComponent.download()\" aria-label=\"Save\">\n              <mat-icon>save_alt</mat-icon>Save\n            </button>\n            <button mat-button color=\"Primary\" (click)=\"projectSecurityChildComponent.refresh()\" aria-label=\"Refresh\">\n              <mat-icon>refresh</mat-icon>refresh\n            </button>\n          </mat-card-actions>\n        </mat-card>\n      </div>\n\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './core/shared/material.module';\n\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { ConnectionDialogComponent } from './connection-dialog/connection-dialog.component';\nimport { CollectionComponent } from './collection/collection.component';\nimport { ProjectComponent } from './project/project.component';\nimport { StripNamePipe } from './collection/strip-name.pipe';\nimport { CollectionSecurityComponent } from './collection/collection-security.component';\nimport { FindingDialogComponent } from './finding-dialog/finding-dialog.component';\nimport { ProjectSecurityComponent } from './project/project-security.component';\n// import { OrganizationComponent } from './organization/organization.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NotFoundComponent,\n    ConnectionDialogComponent,\n    CollectionComponent,\n    ProjectComponent,\n    StripNamePipe,\n    CollectionSecurityComponent,\n    FindingDialogComponent,\n    ProjectSecurityComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MaterialModule\n  ],\n  // providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\n\nimport { Finding } from '../core/shared/interfaces';\n\nexport interface DialogData {\n  findings: Finding[];\n}\n\n@Component({\n  selector: 'app-finding-dialog',\n  templateUrl: './finding-dialog.component.html',\n  styleUrls: ['./finding-dialog.component.css']\n})\nexport class FindingDialogComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<FindingDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData | any\n  ) { }\n\n  ngOnInit(): void {\n    console.log(this.data);\n    // Might have to do something here\n  }\n\n  onOkClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n","<h1 mat-dialog-title>Findings</h1>\n<div mat-dialog-content>\n    <mat-list>\n        <mat-list-item *ngFor=\"let finding of data.findings\" matTooltip=\"{{finding.rule.description}}\">\n            <mat-icon mat-list-icon>error</mat-icon>\n            <div mat-line>{{finding.rule.name}}</div>\n            <div mat-line>Analyzed:{{finding.rule.detail}}</div>\n            <div mat-line>Found:{{finding.value}}</div>\n        </mat-list-item>\n    </mat-list>\n</div>\n<div mat-dialog-actions>\n    <button mat-button (click)=\"onOkClick()\" cdkFocusInitial>Ok</button>\n</div>","import { Injectable } from '@angular/core';\nimport { Finding, Rule } from '../shared/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RuleService {\n\n  constructor() { }\n\n  getFinding(rule: Rule, value: string, id: string): Finding {\n    return {\n      rule,\n      value,\n      id\n    };\n  }\n\n  getUnexpectedCollectionGroupMemberRule(detail: string): Rule {\n    return {\n      name: 'Unexpected collection-level group member',\n      detail,\n      description: 'Security groups defined at the collection level should be well-known and contain windows or active directory groups.'\n    };\n  }\n\n  getUnexpectedProjectGroupMemberRule(detail: string): Rule {\n    return {\n      name: 'Unexpected project-level group member',\n      detail,\n      description: 'Security groups defined at the project level should be well-known and contain only collection level groups.'\n    };\n  }\n\n  getCsvArray(findings: Finding[]): string{\n    const csv: string[] = [];\n    csv.push('\"Rule\",\"Rule Description\",\"Group\",\"Member Id\",\"Member Name\"');\n    findings.forEach(finding => {\n      csv.push(`\"${finding.rule.name}\",\"${finding.rule.description}\",\"${finding.rule.detail}\",\"${finding.id}\",\"${finding.value}\"`);\n    });\n    const csvArray = csv.join('\\r\\n');\n    return csvArray;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Observable, from, of, zip, forkJoin } from 'rxjs';\r\nimport { concatMap } from 'rxjs/operators';\r\n\r\nimport { Collection, SecurityNamespace, Identity } from '../core/shared/azdo-types';\r\nimport { AzDoService } from '../core/services/azdo.service';\r\nimport { AzDoConnectionService } from '../core/services/azdo-connection.service';\r\nimport { Finding, Rule } from '../core/shared/interfaces';\r\nimport { SnackbarService } from '../core/services/snackbar.service';\r\nimport { FindingDialogComponent } from '../finding-dialog/finding-dialog.component';\r\nimport { RuleService } from '../core/services/rule.service';\r\nimport { UtilityService } from '../core/services/utility.service';\r\nimport { AzDoCacheService } from '../core/services/azdo-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-collection-security',\r\n  templateUrl: './collection-security.component.html',\r\n  styleUrls: ['./collection-security.component.css']\r\n})\r\nexport class CollectionSecurityComponent implements OnInit {\r\n  showCollectionSecuritySpinner = false;\r\n  showSecurityFindingsBadge = false;\r\n  securityFindingsCount = 0;\r\n  securityNamespaces: Collection<SecurityNamespace> = {};\r\n  projectCollectionValidUsersGroup: Collection<Identity> = {};\r\n  projectCollectionValidUsersGroupMembers: Collection<Identity> = {};\r\n  projectCollectionValidUsersGroupMembersMembers: Collection<Identity> = {};\r\n  findings: Finding[] = [];\r\n\r\n  constructor(\r\n    private azdoConnectionService: AzDoConnectionService,\r\n    private azdoService: AzDoService,\r\n    private azdoCacheService: AzDoCacheService,\r\n    private snackBarService: SnackbarService,\r\n    private ruleService: RuleService,\r\n    public dialog: MatDialog,\r\n    private utilityService: UtilityService\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.showCollectionSecuritySpinner = true;\r\n    this.findings = [];\r\n    from(this.azdoService.getProjectCollectionValidUsersGroup()).pipe(\r\n      concatMap(topLevelGroupResponse => {\r\n        const topLevelGroup: Identity = topLevelGroupResponse?.value![0];\r\n        return forkJoin([\r\n          of(topLevelGroupResponse),\r\n          this.azdoService.getIdentities(topLevelGroup.memberIds)\r\n        ]);\r\n      }),\r\n      concatMap(([topLevelGroupResponse, topLevelGroupMembers]) => {\r\n        return forkJoin([\r\n          of(topLevelGroupResponse), of(topLevelGroupMembers),\r\n          this.azdoService.getIdentities(this.combineMemberIds(topLevelGroupMembers?.value!))\r\n        ]);\r\n      }),\r\n    ).subscribe(values => {\r\n      this.azdoCacheService.cacheIdentities(values[1]);\r\n      this.azdoCacheService.cacheIdentities(values[2]);\r\n      this.projectCollectionValidUsersGroup = values[0];\r\n      this.projectCollectionValidUsersGroupMembers = values[1];\r\n      this.projectCollectionValidUsersGroupMembersMembers = values[2];\r\n      this.checkProjectCollectionValidUsers();\r\n      this.securityFindingsCount = this.findings.length;\r\n      this.showCollectionSecuritySpinner = false;\r\n    });\r\n  }\r\n\r\n  openFindingsDialog(chip: any): void {\r\n    if (this.findings.length) {\r\n      const dialogRef = this.dialog.open(FindingDialogComponent, {\r\n        width: '500px',\r\n        data: { findings: this.findings }\r\n      });\r\n    } else {\r\n      // Show some eyecandy telling them how great their security is and what was checked\r\n    }\r\n  }\r\n\r\n  combineMemberIds(identities: Identity[]): string[] {\r\n    let memberIds: string[] = [];\r\n    identities.forEach(identity => {\r\n      memberIds = memberIds.concat(identity.memberIds!);\r\n    });\r\n    return memberIds;\r\n  }\r\n\r\n  refresh(): void {\r\n    this.ngOnInit();\r\n  }\r\n\r\n  download(): void {\r\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\r\n    this.utilityService.downloadCsvFile(\r\n      this.ruleService.getCsvArray(this.findings),\r\n      `${collectionName}-SecurityGroups.csv`);\r\n  }\r\n\r\n  private checkProjectCollectionValidUsers(): void {\r\n    console.log('Checking Project Collection Valid Users');\r\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\r\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\r\n\r\n    this.projectCollectionValidUsersGroupMembers?.value!.forEach(member => {\r\n      console.log(`  Checking Member: member: ${member.providerDisplayName}`)\r\n      const memberIdentity = this.projectCollectionValidUsersGroupMembers?.value?.find(\r\n        element => element?.descriptor === member.descriptor\r\n      );\r\n\r\n      if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Administrators`.toUpperCase()) {\r\n        this.checkProjectCollectionAdministrators(memberIdentity);\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Auditors`.toUpperCase()) {\r\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}Auditors`, 'Project Collection Auditors');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Build Administrators`.toUpperCase()) {\r\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}BuildAdministrators`, 'Project Collection Build Administrators');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Build Service Accounts`.toUpperCase()) {\r\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}BuildServiceAccounts`, 'Project Collection Build Service Accounts');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Developers`.toUpperCase()) {\r\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}Developers`, 'Project Collection Developers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Operators`.toUpperCase()) {\r\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}Operators`, 'Project Collection Operators');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Compliance Officers`.toUpperCase()) {\r\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}ComplianceOfficers`, 'Project Collection Compliance Officers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection DevOps Engineers`.toUpperCase()) {\r\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}DevOpsEngineers`, 'Project Collection DevOps Engineers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Release Engineers`.toUpperCase()) {\r\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}ReleaseEngineers`, 'Project Collection Release Engineers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Proxy Service Accounts`.toUpperCase()) {\r\n        this.checkProjectCollectionProxyServiceAccounts(memberIdentity);\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Service Accounts`.toUpperCase()) {\r\n        this.checkProjectCollectionServiceAccounts(memberIdentity);\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Test Service Accounts`.toUpperCase()) {\r\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}TestServiceAccounts`, 'Project Collection Test Service Accounts');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Testers`.toUpperCase()) {\r\n        this.checkProjectCollectionGroup(memberIdentity, `${instanceName}Testers`, 'Project Collection Testers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Security Service Group`.toUpperCase()) {\r\n        this.checkSecurityServiceGroup(memberIdentity);\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase().includes('Project Valid Users'.toUpperCase())) {\r\n        console.log(`   Skipping ${memberIdentity.providerDisplayName}`);\r\n        // this.checkSecurityServiceGroup(identity);\r\n      }\r\n\r\n      else {\r\n        this.findings.push(\r\n          this.ruleService.getFinding(\r\n            this.ruleService.getUnexpectedCollectionGroupMemberRule('Project Collection Valid Users'),\r\n            memberIdentity?.providerDisplayName!,\r\n            memberIdentity?.descriptor!\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks the members of a collection level group that should map to a singular windows group:\r\n   * 1. An Active Directory or Windows Group that follows naming convention [instance][GroupName]\r\n   * @param identity The identity that matches the rules being checked by this method\r\n   */\r\n  private checkProjectCollectionGroup(identity: Identity, groupName: string, groupDisplayName: string): void {\r\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\r\n\r\n    identity.members.forEach(descriptor => {\r\n      const memberIdentity = this.projectCollectionValidUsersGroupMembersMembers?.value?.find(\r\n        element => element?.descriptor === descriptor\r\n      );\r\n      console.log(`   Checking Member: memberIdentity: ${memberIdentity?.providerDisplayName}`)\r\n\r\n      if (!(memberIdentity?.providerDisplayName?.toUpperCase() === `${groupName}`.toUpperCase())\r\n      ) {\r\n        console.log(`Invalid Identity found in ${groupDisplayName}`);\r\n        console.log(memberIdentity);\r\n        this.findings.push(\r\n          this.ruleService.getFinding(\r\n            this.ruleService.getUnexpectedCollectionGroupMemberRule(groupDisplayName),\r\n            memberIdentity?.providerDisplayName!,\r\n            memberIdentity?.descriptor!\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks the members of the Project Collection Administrators Group are:\r\n   * 1. An Active Directory or Windows Group that follows naming convention [instance]-[Administrators]\r\n   * 2. An OOTB well-known group\r\n   * @param identity The identity that matches the rules being checked by this method\r\n   */\r\n  private checkProjectCollectionAdministrators(identity: Identity): void {\r\n    console.log(`  Checking Project Collection Administrators: identity: ${identity.providerDisplayName}`);\r\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\r\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\r\n\r\n    identity.members.forEach(descriptor => {\r\n      const memberIdentity = this.projectCollectionValidUsersGroupMembersMembers?.value?.find(\r\n        element => element?.descriptor === descriptor\r\n      );\r\n      console.log(`   Checking Member: memberIdentity: ${memberIdentity?.providerDisplayName}`)\r\n\r\n      if (!(memberIdentity?.providerDisplayName?.toUpperCase() === `[TEAM FOUNDATION]\\\\Team Foundation Administrators`.toUpperCase()\r\n        || memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Project Collection Service Accounts`.toUpperCase()\r\n        || memberIdentity?.providerDisplayName?.toUpperCase() === `${instanceName}Administrators`.toUpperCase()\r\n        || memberIdentity?.providerDisplayName?.toUpperCase() === `Administrators`.toUpperCase()\r\n        || memberIdentity?.providerDisplayName?.toUpperCase() === `[TEAM FOUNDATION]\\\\Azure DevOps Service Accounts`.toUpperCase())\r\n      ) {\r\n        this.findings.push(\r\n          this.ruleService.getFinding(\r\n            this.ruleService.getUnexpectedCollectionGroupMemberRule('Project Collection Administrators'),\r\n            memberIdentity?.providerDisplayName!,\r\n            memberIdentity?.descriptor!\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks the members of the Project Collection Service Accounts are:\r\n   * 1. An OOTB well-known group\r\n   * @param identity The identity that matches the rules being checked by this method\r\n   */\r\n  private checkProjectCollectionServiceAccounts(identity: Identity): void {\r\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\r\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\r\n\r\n    identity.members.forEach(descriptor => {\r\n      const memberIdentity = this.projectCollectionValidUsersGroupMembersMembers?.value?.find(\r\n        element => element?.descriptor === descriptor\r\n      );\r\n      console.log(`   Checking Member: memberIdentity: ${memberIdentity?.providerDisplayName}`)\r\n\r\n      if (!(memberIdentity?.providerDisplayName?.toUpperCase() === `[TEAM FOUNDATION]\\\\Azure DevOps Service Accounts`.toUpperCase()\r\n        || memberIdentity?.providerDisplayName?.toUpperCase() === `[${collectionName}]\\\\Team Foundation Service Accounts`.toUpperCase())\r\n      ) {\r\n        this.findings.push(\r\n          this.ruleService.getFinding(\r\n            this.ruleService.getUnexpectedCollectionGroupMemberRule('Project Collection Service Accounts'),\r\n            memberIdentity?.providerDisplayName!,\r\n            memberIdentity?.descriptor!\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks the members of the Project Collection Proxy Service Accounts are:\r\n   * 1. An OOTB well-known group\r\n   * @param identity The identity that matches the rules being checked by this method\r\n   */\r\n  private checkProjectCollectionProxyServiceAccounts(identity: Identity): void {\r\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\r\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\r\n\r\n    identity.members.forEach(descriptor => {\r\n      const memberIdentity = this.projectCollectionValidUsersGroupMembersMembers?.value?.find(\r\n        element => element?.descriptor === descriptor\r\n      );\r\n      console.log(`   Checking Member: memberIdentity: ${memberIdentity?.providerDisplayName}`)\r\n\r\n      if (!(memberIdentity?.providerDisplayName?.toUpperCase() === `[TEAM FOUNDATION]\\\\Azure DevOps Proxy Service Accounts`.toUpperCase())\r\n      ) {\r\n        this.findings.push(\r\n          this.ruleService.getFinding(\r\n            this.ruleService.getUnexpectedCollectionGroupMemberRule('Project Collection Proxy Service Accounts'),\r\n            memberIdentity?.providerDisplayName!,\r\n            memberIdentity?.descriptor!\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks the members of the Security Service Group are:\r\n   * 1. An Active Directory or Windows Group that follows naming convention [instance][Developers]\r\n   * @param identity The identity that matches the rules being checked by this method\r\n   */\r\n  private checkSecurityServiceGroup(identity: Identity): void {\r\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\r\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\r\n\r\n    identity.members.forEach(descriptor => {\r\n      const memberIdentity = this.projectCollectionValidUsersGroupMembersMembers?.value?.find(\r\n        element => element?.descriptor === descriptor\r\n      );\r\n      console.log(`   Checking Member: memberIdentity: ${memberIdentity?.providerDisplayName}`)\r\n\r\n      if (!(memberIdentity?.customDisplayName?.toUpperCase().includes('Build Service'.toUpperCase()))\r\n      ) {\r\n        console.log(`Invalid Identity found in SecurityServiceGroup`);\r\n        console.log(memberIdentity);\r\n        this.findings.push(\r\n          this.ruleService.getFinding(\r\n            this.ruleService.getUnexpectedCollectionGroupMemberRule('Security Service Group'),\r\n            memberIdentity?.providerDisplayName!,\r\n            memberIdentity?.descriptor!\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private check(identity: Identity): void {\r\n    // console.log(\"check\");\r\n    // Should only contain [{collection}] Project Collection Service Acounts\r\n  }\r\n}\r\n","<div class=\"centered\">\n    <mat-spinner *ngIf=\"showCollectionSecuritySpinner\" diameter=\"30\" mode=\"indeterminate\"></mat-spinner>\n</div>\n\n<mat-chip-list aria-label=\"Results\" *ngIf=\"!showCollectionSecuritySpinner\" [selectable]=\"true\">\n    <mat-chip matBadge=\"{{securityFindingsCount}}\" matBadgeColor=\"warn\" (click)=\"openFindingsDialog('securityFindings')\">Security\n        Groups</mat-chip>\n</mat-chip-list>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1>404</h1>\n","import { Injectable } from '@angular/core';\r\nimport { Collection, SecurityNamespace } from '../shared/azdo-types';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtilityService {\r\n\r\n  constructor() { }\r\n\r\n  downloadCsvFile(csvArray: string, fileName: string): void {\r\n    const a = document.createElement('a');\r\n    const blob = new Blob([csvArray], { type: 'text/csv' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    a.href = url;\r\n    a.download = fileName;\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n    a.remove();\r\n  }\r\n\r\n  swapSlashes(source: string): string{\r\n    return source.replace(/\\\\/g, '/');\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatListModule } from '@angular/material/list';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nconst MaterialComponents = [\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatIconModule,\n  MatToolbarModule,\n  MatSidenavModule,\n  MatListModule,\n  MatFormFieldModule,\n  MatMenuModule,\n  MatDialogModule,\n  MatInputModule,\n  MatSelectModule,\n  MatSnackBarModule,\n  MatProgressSpinnerModule,\n  MatChipsModule,\n  MatCardModule,\n  MatBadgeModule,\n  MatGridListModule,\n  MatTooltipModule,\n  FlexLayoutModule\n];\n\n@NgModule({\n  imports: [MaterialComponents],\n  exports: [MaterialComponents]\n})\nexport class MaterialModule { }\n\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { Observable, from, of, zip, forkJoin, concat } from 'rxjs';\r\nimport { concatMap } from 'rxjs/operators';\r\nimport { saveAs } from 'file-saver';\r\nimport { Collection, ProjectInfo, SecurityNamespace, Identity, Folder } from '../core/shared/azdo-types';\r\nimport { AzDoService } from '../core/services/azdo.service';\r\nimport { AzDoConnectionService } from '../core/services/azdo-connection.service';\r\nimport { Finding, Rule } from '../core/shared/interfaces';\r\nimport { SnackbarService } from '../core/services/snackbar.service';\r\nimport { FindingDialogComponent } from '../finding-dialog/finding-dialog.component';\r\nimport { RuleService } from '../core/services/rule.service';\r\nimport { UtilityService } from '../core/services/utility.service';\r\nimport { AzDoCacheService } from '../core/services/azdo-cache.service';\r\n\r\n@Component({\r\n  selector: 'app-project-security',\r\n  templateUrl: './project-security.component.html',\r\n  styleUrls: ['./project-security.component.css']\r\n})\r\nexport class ProjectSecurityComponent implements OnInit {\r\n  @Input() project: ProjectInfo;\r\n  showProjectSecuritySpinner = false;\r\n  showSecurityFindingsBadge = false;\r\n  securityFindingsCount = 0;\r\n  securityNamespaces: Collection<SecurityNamespace> = {};\r\n  projectValidUsersGroup: Collection<Identity> = {};\r\n  projectValidUsersGroupMembers: Collection<Identity> = {};\r\n  projectValidUsersGroupMembersMembers: Collection<Identity> = {};\r\n  projectReleaseFolders: Collection<Folder> = {};\r\n  projectReleaseFolderAcls: any;\r\n  findings: Finding[] = [];\r\n\r\n  constructor(\r\n    private azdoConnectionService: AzDoConnectionService,\r\n    private azdoService: AzDoService,\r\n    private azdoCacheService: AzDoCacheService,\r\n    private snackBarService: SnackbarService,\r\n    private ruleService: RuleService,\r\n    public dialog: MatDialog,\r\n    private utilityService: UtilityService\r\n  ) {\r\n    this.project = {};\r\n    this.securityNamespaces = this.azdoCacheService.securityNamespaces;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.showProjectSecuritySpinner = true;\r\n    this.findings = [];\r\n\r\n    from(this.azdoService.getProjectValidUsersGroup(this.project?.name!)).pipe(\r\n      concatMap(topLevelGroupResponse => {\r\n        const topLevelGroup: Identity = topLevelGroupResponse?.value![0];\r\n        return forkJoin([\r\n          of(topLevelGroupResponse),\r\n          this.azdoService.getIdentities(\r\n            topLevelGroup.memberIds\r\n          )\r\n        ]);\r\n      }),\r\n      concatMap(([topLevelGroupResponse, topLevelGroupMembers]) => {\r\n        return forkJoin([\r\n          of(topLevelGroupResponse), of(topLevelGroupMembers),\r\n          this.azdoService.getIdentities(\r\n            this.combineMemberIds(topLevelGroupMembers?.value!)\r\n          )\r\n        ]);\r\n      }),\r\n      concatMap(([topLevelGroupResponse, topLevelGroupMembers, secondLevelGroupMembers]) => {\r\n        return forkJoin([\r\n          of(topLevelGroupResponse), of(topLevelGroupMembers), of(secondLevelGroupMembers),\r\n          this.azdoService.getReleaseFolders(\r\n            this.project?.name!\r\n          )\r\n        ]);\r\n      }),\r\n      concatMap(([topLevelGroupResponse, topLevelGroupMembers, secondLevelGroupMembers, releaseFolders]) => {\r\n        return forkJoin([\r\n          of(topLevelGroupResponse), of(topLevelGroupMembers), of(secondLevelGroupMembers), of(releaseFolders),\r\n          this.azdoService.getAccessControlLists(\r\n            this.azdoCacheService.releaseManagementSecurityNamespaceId,\r\n            `${this.project.id}`\r\n          )\r\n        ]);\r\n      })\r\n    ).subscribe(values => {\r\n      this.azdoCacheService.cacheIdentities(values[1]);\r\n      this.azdoCacheService.cacheIdentities(values[2]);\r\n      this.projectValidUsersGroup = values[0];\r\n      this.projectValidUsersGroupMembers = values[1];\r\n      this.projectValidUsersGroupMembersMembers = values[2];\r\n      this.projectReleaseFolders = values[3];\r\n      this.projectReleaseFolderAcls = values[4];\r\n      this.checkProjectValidUsers();\r\n      this.checkReleaseFolderSecurity();\r\n      this.securityFindingsCount = this.findings.length;\r\n      this.showProjectSecuritySpinner = false;\r\n    });\r\n  }\r\n\r\n  openFindingsDialog(chip: any): void {\r\n    if (this.findings.length) {\r\n      const dialogRef = this.dialog.open(FindingDialogComponent, {\r\n        width: '500px',\r\n        data: { findings: this.findings }\r\n      });\r\n    } else {\r\n      // Show some eyecandy telling them how great their security is and what was checked\r\n    }\r\n  }\r\n\r\n  combineMemberIds(identities: Identity[]): string[] {\r\n    let memberIds: string[] = [];\r\n    identities.forEach(identity => {\r\n      memberIds = memberIds.concat(identity.memberIds!);\r\n    });\r\n    return memberIds;\r\n  }\r\n\r\n  refresh(): void {\r\n    this.ngOnInit();\r\n  }\r\n\r\n  download(): void {\r\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\r\n    this.utilityService.downloadCsvFile(\r\n      this.ruleService.getCsvArray(this.findings),\r\n      `${collectionName}-${this.project.name}-SecurityGroups.csv`);\r\n  }\r\n\r\n  private checkProjectValidUsers(): void {\r\n    console.log('Checking Project Valid Users');\r\n    const collectionName = this.azdoConnectionService.getCollectionName(this.azdoConnectionService.currentConnection.url);\r\n    const instanceName = this.azdoConnectionService.currentConnection?.instanceName;\r\n\r\n    this.projectValidUsersGroupMembers?.value!.forEach(member => {\r\n      console.log(`  Checking Member: member: ${member.providerDisplayName}`)\r\n      const memberIdentity = this.projectValidUsersGroupMembers?.value?.find(\r\n        element => element?.descriptor === member.descriptor\r\n      );\r\n\r\n      if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Project Administrators`.toUpperCase()) {\r\n        this.checkProjectGroup(memberIdentity, `[${collectionName}]\\\\Project Collection Administrators`, 'Project Administrators');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Auditors`.toUpperCase()) {\r\n        this.checkProjectGroup(memberIdentity, `[${collectionName}]\\\\Project Collection Auditors`, 'Auditors');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Build Administrators`.toUpperCase()) {\r\n        this.checkProjectGroup(memberIdentity, `[${collectionName}]\\\\Project Collection Build Administrators`, 'Build Administrators');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Developers`.toUpperCase()) {\r\n        this.checkProjectGroup(memberIdentity, `[${collectionName}]\\\\Project Collection Developers`, 'Developers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Operators`.toUpperCase()) {\r\n        this.checkProjectGroup(memberIdentity, `[${collectionName}]\\\\Project Collection Operators`, 'Operators');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Compliance Officers`.toUpperCase()) {\r\n        this.checkProjectGroup(memberIdentity, `[${collectionName}]\\\\Project Collection Compliance Officers`, 'Compliance Officers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\DevOps Engineers`.toUpperCase()) {\r\n        this.checkProjectGroup(memberIdentity, `[${collectionName}]\\\\Project Collection DevOps Engineers`, 'DevOps Engineers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Release Engineers`.toUpperCase()) {\r\n        this.checkProjectGroup(memberIdentity, `[${collectionName}]\\\\Project Collection Release Engineers`, 'Release Engineers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Testers`.toUpperCase()) {\r\n        this.checkProjectGroup(memberIdentity, `[${collectionName}]\\\\Project Collection Testers`, 'Testers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Readers`.toUpperCase()) {\r\n        this.checkProjectGroup(memberIdentity, `[${collectionName}]\\\\Project Collection Readers`, 'Readers');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Contributors`.toUpperCase()) {\r\n        this.checkProjectGroupIsEmpty(memberIdentity, 'Contributors');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase() === `[${this.project.name}]\\\\Release Administrators`.toUpperCase()) {\r\n        this.checkProjectGroupIsEmpty(memberIdentity, 'Release Administrators');\r\n      }\r\n      else if (memberIdentity?.providerDisplayName?.toUpperCase().includes('Team'.toUpperCase())) {\r\n        console.log(`Skipping ${memberIdentity.providerDisplayName}`);\r\n        // this.checkSecurityServiceGroup(identity);\r\n      }\r\n\r\n      else {\r\n        this.findings.push(\r\n          this.ruleService.getFinding(\r\n            this.ruleService.getUnexpectedProjectGroupMemberRule('Project Valid Users'),\r\n            memberIdentity?.providerDisplayName!,\r\n            memberIdentity?.descriptor!\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks the members of a project level group that should map to a collection level group:\r\n   * @param identity The identity that matches the rules being checked by this method\r\n   */\r\n  private checkProjectGroup(identity: Identity, groupName: string, groupDisplayName: string): void {\r\n\r\n    identity.members.forEach(descriptor => {\r\n      const memberIdentity = this.projectValidUsersGroupMembersMembers?.value?.find(\r\n        element => element?.descriptor === descriptor\r\n      );\r\n      console.log(`   Checking Member: memberIdentity: ${memberIdentity?.providerDisplayName}`)\r\n\r\n      if (!(memberIdentity?.providerDisplayName?.toUpperCase() === `${groupName}`.toUpperCase())) {\r\n        console.log(`Invalid Identity found in ${groupDisplayName}`);\r\n        this.findings.push(\r\n          this.ruleService.getFinding(\r\n            this.ruleService.getUnexpectedProjectGroupMemberRule(groupDisplayName),\r\n            memberIdentity?.providerDisplayName!,\r\n            memberIdentity?.descriptor!\r\n          )\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if a project level group is empty:\r\n   * @param identity The identity that matches the rules being checked by this method\r\n   */\r\n  private checkProjectGroupIsEmpty(identity: Identity, groupDisplayName: string): void {\r\n\r\n    identity.members.forEach(descriptor => {\r\n      const memberIdentity = this.projectValidUsersGroupMembersMembers?.value?.find(\r\n        element => element?.descriptor === descriptor\r\n      );\r\n\r\n      console.log(`Invalid Identity found in ${groupDisplayName}`);\r\n      this.findings.push(\r\n        this.ruleService.getFinding(\r\n          this.ruleService.getUnexpectedProjectGroupMemberRule(groupDisplayName),\r\n          memberIdentity?.providerDisplayName!,\r\n          memberIdentity?.descriptor!\r\n        )\r\n      );\r\n    });\r\n  }\r\n\r\n  private checkReleaseFolderSecurity(): void {\r\n\r\n    const releasePermissionBits = this.azdoCacheService.getSecurityNamespace(\r\n      this.azdoCacheService.releaseManagementSecurityNamespaceId).actions;\r\n    // console.log(releasePermissionBits);\r\n    // console.log(this.projectReleaseFolders);\r\n    // console.log(this.projectReleaseFolderAcls);\r\n    this.projectReleaseFolderAcls.value.forEach((acl: any) => {\r\n      for (const key in acl.acesDictionary) {\r\n        if (acl.acesDictionary.hasOwnProperty(key)) {\r\n          const value = acl.acesDictionary[key];\r\n          const identity = this.azdoCacheService.getIdentity(key);\r\n          // console.log(identity);\r\n        }\r\n      }\r\n    });\r\n\r\n    // const rootFolder: Folder = this.projectReleaseFolders?.value![0]\r\n    // this.azdoService.getAccessControlLists(\r\n    //   releaseManagementSecurityNamespace.namespaceId!,\r\n    //   `${this.project.id}${this.utilityService.swapSlashes(rootFolder.path)}`\r\n    // ).subscribe(acls => {\r\n    //   acls.value?.forEach(acl => {\r\n    //     this.checkProjectReleaseFolders(acl);\r\n    //   });\r\n    // });\r\n    // this.projectReleaseFolders.value?.forEach(folder => {\r\n    //   const aclResponse = this.azdoService.getAccessControlLists(\r\n    //     releaseManagementSecurityNamespace.namespaceId!,\r\n    //     `${this.project.id}${this.utilityService.swapSlashes(folder.path)}`\r\n    //   ).subscribe(acls => {\r\n    //     acls.value?.forEach(acl => {\r\n    //       this.checkProjectReleaseFolder(folder, acl);\r\n    //     });\r\n    //   })\r\n\r\n    // });\r\n\r\n  }\r\n\r\n  private checkProjectReleaseFolders(acl: any[]): void {\r\n    // console.log(folder);\r\n    // console.log(acl);\r\n  }\r\n}\r\n","<div class=\"centered\">\n    <mat-spinner *ngIf=\"showProjectSecuritySpinner\" diameter=\"30\" mode=\"indeterminate\"></mat-spinner>\n</div>\n\n<mat-chip-list aria-label=\"Results\" *ngIf=\"!showProjectSecuritySpinner\" [selectable]=\"true\">\n    <mat-chip matBadge=\"{{securityFindingsCount}}\" matBadgeColor=\"warn\" [matBadgeHidden]=\"!securityFindingsCount\"\n        (click)=\"openFindingsDialog('securityFindings')\">Security\n        Groups</mat-chip>\n    <mat-chip>Security</mat-chip>\n</mat-chip-list>","import { Pipe, PipeTransform } from '@angular/core';\nimport { AzDoConnectionService } from '../core/services/azdo-connection.service';\n\n@Pipe({\n  name: 'stripName'\n})\nexport class StripNamePipe implements PipeTransform {\n\n  constructor(\n    private azDoConnectionService: AzDoConnectionService,\n  ) {\n  }\n\n  transform(value: string, ...args: string[]): string {\n    return this.azDoConnectionService.getCollectionName(value);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { ConnectionInfo } from '../shared/interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AzDoConnectionService {\n  connections: ConnectionInfo[];\n  currentConnection: ConnectionInfo;\n  mostRecentApiVersion = '6.0';\n\n  constructor(\n  ) {\n    this.currentConnection = { url: 'Connections' };\n    const storedConnections: ConnectionInfo[] = JSON.parse(localStorage.getItem('connections') as string);\n    if (storedConnections === null) {\n      this.connections = new Array<ConnectionInfo>();\n    }\n    else {\n      this.connections = storedConnections;\n      this.connections.forEach(connection => {\n        // console.log(connection);\n        if (connection.selected) {\n          // console.log(\"found initial connection\");\n          this.currentConnection = connection;\n        }\n      });\n    }\n  }\n\n  getCollectionName(connection: string): string {\n    let connectionUrl = '';\n    if (connection.substring(connection.length - 1) === '/') {\n      connectionUrl = connection.slice(0, -1);\n    }\n    else {\n      connectionUrl = connection;\n    }\n    return connectionUrl.substring(connectionUrl.lastIndexOf('/') + 1);\n    // handle case where url is Azure DevOps Services vs. On-Premise Server\n  }\n\n  /**\n   * Provides a safe way set the current connection to one that exists in the collection\n   * Need to figure out how to expose a read only variable that can be updated by a metho\n   */\n  setConnection(newConnection: ConnectionInfo): void {\n    const foundConnection: ConnectionInfo | null = this.findConnection(newConnection.url);\n    if (foundConnection) {\n      this.connections.forEach(connection => {\n        if (connection.url.toLocaleLowerCase() === newConnection.url.toLocaleLowerCase()) {\n          // console.log(`${connection.url} now the current connection`);\n          connection.selected = true;\n          this.currentConnection = connection;\n        } else {\n          // console.log(`${connection.url} no longer the current connection`);\n          connection.selected = false;\n        }\n      });\n      // console.log(this.connections);\n      localStorage.setItem('connections', JSON.stringify(this.connections));\n    }\n  }\n\n  private findConnection(connectionUrl: string): ConnectionInfo | null {\n    let foundConnection: ConnectionInfo | null = null;\n    if (this.connections.length > 0) {\n      this.connections.forEach(connection => {\n        if (connection.url.toLocaleLowerCase() === connectionUrl.toLocaleLowerCase()) {\n          foundConnection = connection;\n        }\n      });\n    }\n    return foundConnection;\n  }\n\n  addConnection(connection: ConnectionInfo): void {\n    if (!this.findConnection(connection.url)) {\n      this.connections.push(connection);\n      localStorage.setItem('connections', JSON.stringify(this.connections));\n    }\n  }\n\n  deleteConnection(connection: ConnectionInfo): void {\n    if (this.findConnection(connection.url)) {\n      const index = this.connections.indexOf(connection);\n      if (index > -1) {\n        this.connections.splice(index, 1);\n      }\n      localStorage.setItem('connections', JSON.stringify(this.connections));\n    }\n  }\n\n  /**\n   * Returns true if able to detect the version, otherwise false\n   * @param result The results from REST API call or from a call to getApiVersionFromError\n   * @param connectionAttempted The connection whose ApiVerion is updated\n   */\n  apiVersionFound(result: any, connectionAttempted: ConnectionInfo): boolean {\n\n    if (result.count) {\n      // The happy path, an array of projects returned using the highest supported Api-Version known.\n      connectionAttempted.apiVersion = this.mostRecentApiVersion;\n      return true;\n    } else if (result === '6.0' || result === '5.0' || result === '4.0') {\n      // This is a downlevel API, supported api version extracted from the error message\n      connectionAttempted.apiVersion = result;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Parses the supported API-Version from the error passed.\n   * If a version this application doesn't support is detected provides custom error message.\n   * If none of the above the error provided is returned\n   * @param error An HTTPResponseError from an attempted Azure DevOps REST API call\n   */\n  getApiVersionFromError(error: any): Observable<any> {\n    if (error.message.includes('The latest REST API version this server supports is 6.0')) {\n      return of('6.0');\n    } else if (error.message.includes('The latest REST API version this server supports is 5.0')) {\n      return of('5.0');\n    } else if (error.message.includes('The latest REST API version this server supports is 4.0')) {\n      return of('4.0');\n    } else if (error.message.includes('The latest REST API version this server supports is')) {\n      return of({ message: 'Endpoint needs to support REST API version 4 or higher' });\n    } else if (error.message.includes('Invalid api version string')) {\n      return of({ message: 'Opps, Microsoft changed the version' });\n    } else {\n      return of(error);\n    }\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}